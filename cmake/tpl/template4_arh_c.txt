#include <src/error.h>
${INCLUDE_THIS_HEADER}

#define GET_NEW ((${TYPE_UPPER} *)g_object_new(${TYPE_LOWER}_get_type(), NULL))

static void ${TYPE_LOWER}_class_init (${TYPE_UPPER}Class * c);
static void ${TYPE_LOWER}_init (${TYPE_UPPER} * o);

static void ${TYPE_LOWER}_finalize (${TYPE_UPPER} * o);
static void ${TYPE_LOWER}_insert (${TYPE_UPPER} *self, ${KTYPE_UPPER} *key, ${VTYPE_UPPER} *value);
${VTYPE_UPPER} * ${TYPE_LOWER}_lookup (${TYPE_UPPER} *self, ${KTYPE_UPPER} *key);

static ${TYPE_PARENT_UPPER}Class *parent_class = NULL;

GType
${TYPE_LOWER}_get_type (void)
{
  static GType type = 0;

  if (0 == type)
    {
      static const GTypeInfo info = {
          sizeof (${TYPE_UPPER}Class),
          (GBaseInitFunc) NULL,
          (GBaseFinalizeFunc) NULL,
          (GClassInitFunc) ${TYPE_LOWER}_class_init,
          (GClassFinalizeFunc) NULL,
          NULL /* class_data */,
          sizeof (${TYPE_UPPER}),
          0 /* n_preallocs */,
          (GInstanceInitFunc) ${TYPE_LOWER}_init,
          NULL};

      type = g_type_register_static (${TAIL_PARENT}_TYPE_${HEAD_PARENT}, "${TYPE_UPPER}", &info, (GTypeFlags)0);
    }

  return type;
}

static void 
${TYPE_LOWER}_class_init (${TYPE_UPPER}Class * c)
{
  parent_class = g_type_class_ref (${TAIL_PARENT}_TYPE_${HEAD_PARENT});

  G_OBJECT_CLASS (c)->finalize = ${TYPE_LOWER}_finalize;
}

static void 
${TYPE_LOWER}_init (${TYPE_UPPER} * o)
{
  o->ht = g_hash_table_new_full (${HASH_KEY_FUNC},
                                 ${HASH_VALUE_FUNC},
                                 ${KEY_DESTROY_FUNC),
                                 ${VALUE_DESTROY_FUNC));

  ${TYPE_CAPS} (o)->insert = ${TYPE_LOWER}_insert;
  ${TYPE_CAPS} (o)->lookup = ${TYPE_LOWER}_lookup;
}

static void
${TYPE_LOWER}_finalize (${TYPE_UPPER} * o)
{
  g_hash_table_unref (o->ht);
}

static void
${TYPE_LOWER}_insert (${TYPE_UPPER} *self, ${KTYPE_UPPER} *key, ${VTYPE_UPPER} *value)
{
  g_hash_table_insert (self->ht, key, value);
}

${VTYPE_UPPER} *
${TYPE_LOWER}_lookup (${TYPE_UPPER} *self, ${KTYPE_UPPER} *key)
{
  return g_hash_table_lookup (self->ht, key);
}

GObject * 
${TYPE_LOWER}_new (void)
{
  ${TYPE_UPPER} *self;
  ${TYPE_PARENT_UPPER} *par;

  self = ${CHECKEDCAST_THIS} (GET_NEW);
  par = ${CHECKEDCAST_PARENT} (self);

  return G_OBJECT (self);
}
