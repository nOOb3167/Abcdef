%header{
#include <src/error.h>
#include <src/array_macro.h>

#include <src/test/m-tfthread.h>
#include <src/test/m-tfthreadal.h>
#include <src/test/m-tfthreadallegro.h>
#include <src/test/m-tfthreadcogl.h>
%}

class Tf:Gfx:Threads from G:Object
{
  public GMutex *mmutex
    destroywith g_mutex_free;

  /* (gint, TfGfxThreadsM *) */
  public GHashTable *threads
    destroywith g_hash_table_unref;
}

%adh{

typedef void (*TfGfxThreadsCoglHeartbeatHandler) (MTfThreadCogl *arg1,
                                                  gpointer arg2);

enum TfThreadEnum
{
  TF_THREAD_ALLEGRO = 0,
  TF_THREAD_ALLEGRO_TIMER,
  TF_THREAD_COGL,
  TF_NUM_THREADS
};

struct _TfGfxThreadsM
{
  gboolean started;
  gpointer (*func)(gpointer arg1);
  GThread *thread;
  MTfThread *data;
};
typedef struct _TfGfxThreadsM TfGfxThreadsM;

void
tf_gfx_threads_m_init (TfGfxThreadsM *tm,
                       gpointer (*func)(gpointer arg1),
                       MTfThread *data);

GObject *
_tf_gfx_threads_new (void);

TfGfxThreads *
tf_gfx_threads_get_instance (void);

void
_tf_gfx_threads_add_default (TfGfxThreads *self);

void
tf_gfx_threads_add (TfGfxThreads *self,
                    enum TfThreadEnum id,
                    gpointer (*func1)(gpointer arg1),
                    MTfThread *data);

void
tf_gfx_threads_start (TfGfxThreads *self);

TfGfxThreadsM *
tf_gfx_threads_get (TfGfxThreads *self, enum TfThreadEnum id);

MTfThread *
tf_gfx_threads_get_data (TfGfxThreads *self, enum TfThreadEnum id);

MTfThread *
_tf_gfx_threads_get_data_ul (TfGfxThreads *self, enum TfThreadEnum id);

gulong
tf_gfx_threads_ext_cogl_heartbeat_connect (TfGfxThreads *self,
                                         TfGfxThreadsCoglHeartbeatHandler func,
                                         GObject *ctx);

void
tf_gfx_threads_ext_cogl_heartbeat_disconnect_by_ctx (TfGfxThreads *self,
                                                     GObject *ctx);

%}
